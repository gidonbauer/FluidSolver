#include <cmath>

#include "Utility.hpp"

template <Index N>
auto test_solve_linear_system(const Matrix<double, N, N>& A,
                              const Vector<double, N>& b,
                              const Vector<double, N>& sol) -> bool {
  Vector<double, N> x{};
  solve_linear_system(A, b, x);

  bool any_test_failed = false;
  for (Index i = 0; i < N; ++i) {
    if (std::abs(x(i) - sol(i)) > 1e-12) {
      Igor::Warn(
          "Solving linear system failed: Expected x[{}] = {:.6e} but got {:.6e}: error = {:.6e}",
          i,
          sol(i),
          x(i),
          std::abs(x(i) - sol(i)));
      any_test_failed = true;
    } else if (std::isnan(x(i))) {
      Igor::Warn(
          "Solving linear system failed: Got NaN value for x[{}] but expected {:.6e}", i, sol(i));
      any_test_failed = true;
    }
  }
  return any_test_failed;
}

auto main() -> int {
  bool any_test_failed = false;
  {
    Matrix<double, 3, 3> A{};
    A(0, 0) = 0.814723686393179;
    A(0, 1) = 0.913375856139019;
    A(0, 2) = 0.278498218867048;
    A(1, 0) = 0.905791937075619;
    A(1, 1) = 0.632359246225410;
    A(1, 2) = 0.546881519204984;
    A(2, 0) = 0.126986816293506;
    A(2, 1) = 0.097540404999410;
    A(2, 2) = 0.957506835434298;

    Vector<double, 3> b{};
    b(0) = 0.964888535199277;
    b(1) = 0.157613081677548;
    b(2) = 0.970592781760616;

    Vector<double, 3> x_expected{};
    x_expected(0)   = -2.577532986805525;
    x_expected(1)   = 3.036546089513933;
    x_expected(2)   = 1.046174833646621;

    any_test_failed = test_solve_linear_system(A, b, x_expected) && any_test_failed;
  }

  {
    Matrix<double, 3, 3> A{};
    A(0, 0) = 0.814723686393179;
    A(0, 1) = 0.913375856139019;
    A(0, 2) = 0.278498218867048;
    A(1, 0) = 0.905791937075619;
    A(1, 1) = 0.632359246225410;
    A(1, 2) = 0.546881519204984;
    A(2, 0) = 0.126986816293506;
    A(2, 1) = 0.097540404999410;
    A(2, 2) = 0.957506835434298;

    for (Index i = 0; i < 3; ++i) {
      for (Index j = 0; j < 3; ++j) {
        A(i, j) *= 1e-15;
      }
    }

    Vector<double, 3> b{};
    b(0) = 0.964888535199277;
    b(1) = 0.157613081677548;
    b(2) = 0.970592781760616;
    for (Index i = 0; i < 3; ++i) {
      b(i) *= 1e-15;
    }

    Vector<double, 3> x_expected{};
    x_expected(0)   = -2.577532986805525;
    x_expected(1)   = 3.036546089513933;
    x_expected(2)   = 1.046174833646621;

    any_test_failed = test_solve_linear_system(A, b, x_expected) && any_test_failed;
  }

  {
    Matrix<double, 3, 3> A{};
    A(0, 1) = 1.0;
    A(1, 2) = 1.0;
    A(2, 0) = 1.0;

    Vector<double, 3> b{};
    b(0) = 1.0;
    b(1) = 2.0;
    b(2) = 3.0;

    Vector<double, 3> x_expected{};
    x_expected(0)   = 3.0;
    x_expected(1)   = 1.0;
    x_expected(2)   = 2.0;

    any_test_failed = test_solve_linear_system(A, b, x_expected) && any_test_failed;
  }

  {
    Matrix<double, 10, 10> A{};

    A(0, 0) = 0.957166948242946;
    A(1, 0) = 0.485375648722841;
    A(2, 0) = 0.800280468888800;
    A(3, 0) = 0.141886338627215;
    A(4, 0) = 0.421761282626275;
    A(5, 0) = 0.915735525189067;
    A(6, 0) = 0.792207329559554;
    A(7, 0) = 0.959492426392903;
    A(8, 0) = 0.655740699156587;
    A(9, 0) = 0.035711678574190;

    A(0, 1) = 0.849129305868777;
    A(1, 1) = 0.933993247757551;
    A(2, 1) = 0.678735154857773;
    A(3, 1) = 0.757740130578333;
    A(4, 1) = 0.743132468124916;
    A(5, 1) = 0.392227019534168;
    A(6, 1) = 0.655477890177557;
    A(7, 1) = 0.171186687811562;
    A(8, 1) = 0.706046088019609;
    A(9, 1) = 0.031832846377421;

    A(0, 2) = 0.276922984960890;
    A(1, 2) = 0.046171390631154;
    A(2, 2) = 0.097131781235848;
    A(3, 2) = 0.823457828327293;
    A(4, 2) = 0.694828622975817;
    A(5, 2) = 0.317099480060861;
    A(6, 2) = 0.950222048838355;
    A(7, 2) = 0.034446080502909;
    A(8, 2) = 0.438744359656398;
    A(9, 2) = 0.381558457093008;

    A(0, 3) = 0.765516788149002;
    A(1, 3) = 0.795199901137063;
    A(2, 3) = 0.186872604554379;
    A(3, 3) = 0.489764395788231;
    A(4, 3) = 0.445586200710899;
    A(5, 3) = 0.646313010111265;
    A(6, 3) = 0.709364830858073;
    A(7, 3) = 0.754686681982361;
    A(8, 3) = 0.276025076998578;
    A(9, 3) = 0.679702676853675;

    A(0, 4) = 0.655098003973841;
    A(1, 4) = 0.162611735194631;
    A(2, 4) = 0.118997681558377;
    A(3, 4) = 0.498364051982143;
    A(4, 4) = 0.959743958516081;
    A(5, 4) = 0.340385726666133;
    A(6, 4) = 0.585267750979777;
    A(7, 4) = 0.223811939491137;
    A(8, 4) = 0.751267059305653;
    A(9, 4) = 0.255095115459269;

    A(0, 5) = 0.505957051665142;
    A(1, 5) = 0.699076722656686;
    A(2, 5) = 0.890903252535798;
    A(3, 5) = 0.959291425205444;
    A(4, 5) = 0.547215529963803;
    A(5, 5) = 0.138624442828679;
    A(6, 5) = 0.149294005559057;
    A(7, 5) = 0.257508254123736;
    A(8, 5) = 0.840717255983663;
    A(9, 5) = 0.254282178971531;

    A(0, 6) = 0.814284826068816;
    A(1, 6) = 0.243524968724989;
    A(2, 6) = 0.929263623187228;
    A(3, 6) = 0.349983765984809;
    A(4, 6) = 0.196595250431208;
    A(5, 6) = 0.251083857976031;
    A(6, 6) = 0.616044676146639;
    A(7, 6) = 0.473288848902729;
    A(8, 6) = 0.351659507062997;
    A(9, 6) = 0.830828627896291;

    A(0, 7) = 0.585264091152724;
    A(1, 7) = 0.549723608291140;
    A(2, 7) = 0.917193663829810;
    A(3, 7) = 0.285839018820374;
    A(4, 7) = 0.757200229110721;
    A(5, 7) = 0.753729094278495;
    A(6, 7) = 0.380445846975357;
    A(7, 7) = 0.567821640725221;
    A(8, 7) = 0.075854289563064;
    A(9, 7) = 0.053950118666607;

    A(0, 8) = 0.530797553008973;
    A(1, 8) = 0.779167230102011;
    A(2, 8) = 0.934010684229183;
    A(3, 8) = 0.129906208473730;
    A(4, 8) = 0.568823660872193;
    A(5, 8) = 0.469390641058206;
    A(6, 8) = 0.011902069501241;
    A(7, 8) = 0.337122644398882;
    A(8, 8) = 0.162182308193243;
    A(9, 8) = 0.794284540683907;

    A(0, 9) = 0.311215042044805;
    A(1, 9) = 0.528533135506213;
    A(2, 9) = 0.165648729499781;
    A(3, 9) = 0.601981941401637;
    A(4, 9) = 0.262971284540144;
    A(5, 9) = 0.654079098476782;
    A(6, 9) = 0.689214503140008;
    A(7, 9) = 0.748151592823709;
    A(8, 9) = 0.450541598502498;
    A(9, 9) = 0.083821377996933;

    Vector<double, 10> b{};
    b(0) = 0.228976968716819;
    b(1) = 0.913337361501670;
    b(2) = 0.152378018969223;
    b(3) = 0.825816977489547;
    b(4) = 0.538342435260057;
    b(5) = 0.996134716626885;
    b(6) = 0.078175528753184;
    b(7) = 0.442678269775446;
    b(8) = 0.106652770180584;
    b(9) = 0.961898080855054;

    Vector<double, 10> x_expected{};
    x_expected(0)   = 5.420037855826794;
    x_expected(1)   = -3.633852423225166;
    x_expected(2)   = 5.352277870880643;
    x_expected(3)   = 6.000322717466153;
    x_expected(4)   = -4.509902930613465;
    x_expected(5)   = 4.936176440712305;
    x_expected(6)   = -5.543721403826741;
    x_expected(7)   = -0.776657286893160;
    x_expected(8)   = -0.021486383366250;
    x_expected(9)   = -8.070793019014531;

    any_test_failed = test_solve_linear_system(A, b, x_expected) && any_test_failed;
  }

  return any_test_failed ? 1 : 0;
}
